#!/usr/bin/env bash
# -------------------------------------------------
#
# Package: Malscan
# Author: Josh Grancell <josh@joshgrancell.com>
# Description: Linux malware scanner for web servers
# Copyright: 2015-2018 Josh Grancell
# License: MIT License
#
# -------------------------------------------------

MALSCAN_REPOSITORY_URL="https://raw.githubusercontent.com/malscan/malscan"
SIGNATURE_REPOSITORY_URL="https://www.joshgrancell.com/signatures"

if [[ -f /etc/alpine-release ]]; then
  if ! command -v bash; then
    echo "Bash must be installed for Alpine Linux before running the installer."
    echo "Run 'apk add bash' and then run this installer again."
    exit 1
  fi
fi

## Looping through passed arguments to set values
if [[ "$1" == '--unattended' || "$1" == '-u' ]]; then
  UNATTENDED_INSTALLATION=true
  shift
fi

if [[ "$1" == '--branch' || "$1" == '-b' ]]; then
  CURRENT_INSTALLER_BRANCH="$2"
else
  CURRENT_INSTALLER_BRANCH='1.x'
fi

## Verifying that we are running under root/sudo
if [[ "$EUID" != 0 && $(whoami) != 'root' ]]; then
  echo -e "\\033[31mThe installer must be run either as the root user or under sudo.\\033[37m"
  exit 1
fi

## Determining our OS
function welcome {
  echo ""
  echo -e "\\033[32mmalscan. \\033[37m"
  echo ""
  echo "An open source, libre linux malware scanner."
  echo "Copyright 2014-2018, Josh Grancell"
  echo "https://malscan.com, http://docs.malscan.com"
  echo ""
  echo "-----------------------------------------------"
  echo ""

  if [[ "$UNATTENDED_INSTALLATION" == true ]]; then
    echo -e "     \\033[33mUNATTENDED INSTALLATION MODE ENABLED\\033[37m"
    echo ""
    echo "-----------------------------------------------"
  fi
}

function identify_os {
  if [[ -f "/etc/redhat-release" ]]; then
    ## Determining the RedHat-derivative OS
    if [[ -d /usr/local/cpanel ]]; then
      DISTRO="cPanel"
      echo -e "Detected OS: \\033[32mcPanel\\033[37m"
    elif [[ -f /etc/centos-release ]]; then
      DISTRO="CentOS"
      echo -e "Detected OS: \\033[32mCentOS\\033[37m"
    elif [[ -f /etc/fedora-release ]]; then
      DISTRO="Fedora"
      echo -e "Detected OS: \\033[32mFedora\\033[37m"
    else
      DISTRO="RHEL"
      echo -e "Detected OS: \\033[32mRed Hat Enterprise Linux\\033[37m"
    fi
  elif [[ -f "/etc/lsb-release" ]]; then
    DISTRO="Ubuntu"
    echo -e "Detected OS: \\033[32mUbuntu\\033[37m"
  elif grep -q 'NAME="Debian GNU/Linux"' /etc/os-release; then
    DISTRO="Debian"
    echo -e "Detected OS: \\033[32mDebian\\033[37m"
  elif [[ -f "/etc/alpine-release" ]]; then
    DISTRO="Alpine Linux"
    echo -e "Detected OS: \\033[32mAlpine Linux\\033[37m"
  else
    DISTRO="Unsupported"
    echo -e "Detected OS: \\033[31mAn unsupported OS has been detected. Please attempt a manual install or submit a feature request.\\033[37m"
    exit 1
  fi
}

function configure_for_os {
  if [[ "$DISTRO" == "cPanel" ]]; then
    echo 'Because this is a cPanel system, ClamAV must be manually installed through WHM.'
    echo 'To install ClamAV through WHM, use the cPanel > Manage Plugins tool.'
    echo 'If you have completed the ClamAV plugin installation, you may continue with the Malscan installation.'
    PACKAGE_PRE_DEPENDENCY=''
    PACKAGE_INSTALLER='yum -y -q install'
    PACKAGES='file wget'
  elif [[ "$DISTRO" == 'RHEL' || "$DISTRO" == 'CentOS' ]]; then
    PACKAGE_PRE_DEPENDENCY='yum -y install epel-release'
    PACKAGE_INSTALLER='yum -y install'

    if grep -qs 'release 6' /etc/redhat-release; then
      PACKAGES='file wget clamav clamav-db'
    else
      PACKAGES='file wget clamav clamav-update'
    fi
  elif [[ "$DISTRO" == 'Fedora' ]]; then
    PACKAGE_PRE_DEPENDENCY=''
    PACKAGE_INSTALLER='dnf -y -q install'
    PACKAGES='clamav clamav-update file wget'
  elif [[ "$DISTRO" == 'Ubuntu' || "$DISTRO" == 'Debian' ]]; then
    PACKAGE_PRE_DEPENDENCY='apt-get update'
    PACKAGE_INSTALLER='apt-get -y -q install'
    PACKAGES='file wget clamav clamav-freshclam'
  elif [[ "$DISTRO" == "Alpine Linux" ]]; then
    PACKAGE_PRE_DEPENDENCY='apk update'
    PACKAGE_INSTALLER='apk add'
    PACKAGES='bash clamav file wget shadow'
  else
    ## Incompatible distro, exiting
    echo -e "\\033[31mMalscan has detected that this server is not running a supported operating system."
    echo "Malscan is currently only available for installation on the following Operating Systems: "
    echo "    Alpine Linux 3"
    echo "    CentOS/RHEL 6 & 7"
    echo "    Debian 8 & 9 "
    echo "    Fedora"
    echo "    Ubuntu 14.04, 16.04, & 18.04"
    echo -e "Feature requests for new Operating System support can be submitted to https://github.com/malscan/malscan/issues\\033[37m"
    exit 0
  fi

  echo ""
  echo "$DISTRO requires several additional packages to be installed. This installer will install:"
  for PACKAGE in $PACKAGES; do
    echo "  * $PACKAGE"
  done

  if [[ "$UNATTENDED_INSTALLATION" == true ]]; then
    CONTINUE_INSTALL='y'
    echo ''
    echo -e "\\033[33mAutomated dependency installation beginning. This may take a few minutes.\\033[37m"
  else
    echo -n " Would you like to proceed with malscan installation? [y/N] "
    # shellcheck disable=SC2162
    read CONTINUE_INSTALL
  fi

  if [[ "$CONTINUE_INSTALL" != 'y' && "$CONTINUE_INSTALL" != 'Y' && "$CONTINUE_INSTALL" != 'yes' ]]; then
    exit 0
  fi

  if [[ $PACKAGE_PRE_DEPENDENCY != '' ]]; then
    $PACKAGE_PRE_DEPENDENCY > /dev/null
  fi

  # shellcheck disable=SC2086
  $PACKAGE_INSTALLER $PACKAGES > /dev/null
}

function validate_dependencies {
  {
    command -v clamscan
    command -v freshclam
    command -v file
    command -v wget
  } > /dev/null
  if [[ $? == 1 ]]; then
    echo -e "\\033[31mOne or more dependencies failed to install properly.\\033[37m"
    exit 1
  fi
}

function install_malscan {
  getent group malscan > /dev/null || groupadd -r malscan
  getent passwd malscan > /dev/null || useradd -r -g malscan -s /sbin/nologin -c "Malscan Service User" malscan

  MALSCAN_BINARY_PATH="/usr/local/bin"
  MALSCAN_SYSCONFIG_PATH="/etc/malscan"
  MALSCAN_LOGGING_PATH="/var/log/malscan"
  MALSCAN_SIGNATURE_PATH="/var/lib/malscan"
  MALSCAN_MAN_PATH="/usr/local/share/man/man1"
  MALSCAN_MISC_PATH="/usr/local/share/malscan"

  ## Setting up our configuration files
  mkdir -p "$MALSCAN_SYSCONFIG_PATH"
  wget -P "$MALSCAN_SYSCONFIG_PATH/" "$MALSCAN_REPOSITORY_URL/$CURRENT_INSTALLER_BRANCH/malscan.conf" --quiet
  wget -P "$MALSCAN_SYSCONFIG_PATH/" "$MALSCAN_REPOSITORY_URL/$CURRENT_INSTALLER_BRANCH/freshclam.conf" --quiet
  chown -R malscan:malscan "$MALSCAN_SYSCONFIG_PATH"

  ## Setting up our Signatures and Logging directories
  mkdir -p "$MALSCAN_LOGGING_PATH"
  chown -R malscan:malscan "$MALSCAN_LOGGING_PATH"
  mkdir -p "$MALSCAN_SIGNATURE_PATH"
  chown -R malscan:malscan "$MALSCAN_SIGNATURE_PATH"

  ## Setting up our man page
  mkdir -p "$MALSCAN_MAN_PATH"
  wget -P "$MALSCAN_MAN_PATH/" "$MALSCAN_REPOSITORY_URL/$CURRENT_INSTALLER_BRANCH/malscan.1" --quiet

  ## Setting up the malscan binary
  mkdir -p "$MALSCAN_BINARY_PATH"
  wget -P "$MALSCAN_BINARY_PATH" "$MALSCAN_REPOSITORY_URL/$CURRENT_INSTALLER_BRANCH/malscan" --quiet
  chmod +x "$MALSCAN_BINARY_PATH/malscan"

  ## Creating the misc file directory
  mkdir -p "$MALSCAN_MISC_PATH"
  wget -P "$MALSCAN_MISC_PATH" "$MALSCAN_REPOSITORY_URL/$CURRENT_INSTALLER_BRANCH/LICENSE" --quiet
  wget -P "$MALSCAN_MISC_PATH" "$MALSCAN_REPOSITORY_URL/$CURRENT_INSTALLER_BRANCH/README.md" --quiet
  wget -P "$MALSCAN_MISC_PATH" "$MALSCAN_REPOSITORY_URL/$CURRENT_INSTALLER_BRANCH/version.txt" --quiet
  chown -R malscan:malscan "$MALSCAN_MISC_PATH"
}

function configure_malscan {
  ## Getting the user's input on email notifications
  echo -e "\\033[33mBeginning the malscan configuration process..."
  echo ""

  if [[ "$UNATTENDED_INSTALLATION" == true ]]; then
    EMAIL_NOTIFICATIONS='n'
  else
    echo -ne "Would you like to enable email notifications? [y/N] [default: N] \\033[37m"
    # shellcheck disable=SC2162
    read EMAIL_NOTIFICATIONS
  fi

  if [[ "$EMAIL_NOTIFICATIONS" == "y" || "$EMAIL_NOTIFICATIONS" == "Y" || "$EMAIL_NOTIFICATIONS" == "yes" || "$EMAIL_NOTIFICATIONS" == "YES" ]]; then
      ## Email notifications are being enabled, so we're now getting the list of addresses
      echo -e "\\033[33mAt what email addresses would you like to receive notifications (Comma-separated list): \\033[37m"
      # shellcheck disable=SC2162
      read EMAIL_ADDRESSES

      echo -e "\\033[33mWhat email address would you like malscan to send email from? \\033[37m"
      # shellcheck disable=SC2162
      read SENDER_ADDRESS

      "$MALSCAN_BINARY_PATH/malscan" -s EMAIL_NOTIFICATIONS TRUE > /dev/null
      "$MALSCAN_BINARY_PATH/malscan" -s NOTIFICATION_ADDRESSES "$EMAIL_ADDRESSES" > /dev/null
      "$MALSCAN_BINARY_PATH/malscan" -s MALSCAN_SENDER_ADDRESS "$SENDER_ADDRESS" > /dev/null

    fi

    ## No remote quarantine, so we're now requesting the local quarantine directory
    echo ""

    if [[ "$UNATTENDED_INSTALLATION" == true ]]; then
      QUARANTINE_DIRECTORY=''
    else
      echo -e "\\033[33mWhat directory would you like to quarantine files in? [default=/root/.malscan/quarantine] \\033[37m"
      read -r QUARANTINE_DIRECTORY
    fi

    if [[ "$QUARANTINE_DIRECTORY" = "" || "$QUARANTINE_DIRECTORY" = " " ]]; then
      QUARANTINE_PATH="/root/.malscan/quarantine"
    else
      QUARANTINE_PATH="$QUARANTINE_DIRECTORY"
    fi

    ## Creating the quarantine path if it doesn't exist
    if [[ -d "$QUARANTINE_PATH" ]]; then
      echo -e "\\033[32mYour quarantine path has been successfully set!\\033[37m"
      "$MALSCAN_BINARY_PATH/malscan" -s QUARANTINE_DIRECTORY "$QUARANTINE_PATH" > /dev/null
    else
      mkdir -p "$QUARANTINE_PATH"
      echo -e "\\033[32mThe directory $QUARANTINE_PATH has been created, and set as the Quarantine location.\\033[37m"
      "$MALSCAN_BINARY_PATH/malscan" -s QUARANTINE_DIRECTORY "$QUARANTINE_PATH" > /dev/null
    fi

    echo -e "\\033[032mMalscan has been successfully configured! Beginning initial update...\\033[37m"

    echo -e "Pre-seeding the malscan signature databases with bundled signatures. This may take some time to complete."
    wget -P "$MALSCAN_SIGNATURE_PATH/" "$SIGNATURE_REPOSITORY_URL/main.cvd" --quiet
    wget -P "$MALSCAN_SIGNATURE_PATH/" "$SIGNATURE_REPOSITORY_URL/bytecode.cvd" --quiet
    wget -P "$MALSCAN_SIGNATURE_PATH/" "$SIGNATURE_REPOSITORY_URL/daily.cvd" --quiet
    chown -R malscan:malscan "$MALSCAN_SIGNATURE_PATH"

    echo -e "Updating to the latest malscan signature versions. You can always do this using the command 'malscan -u'"

    "$MALSCAN_BINARY_PATH/malscan" -u
}

function outtro {
  echo "Malscan has been successfully configured and instantited."
  echo "The current malscan configuration can be seen using the 'malscan -c' command"
  echo "All chosen configuration options can be changed using the 'malscan -s' command"
  echo "For more information on using malscan, use the 'malscan -h' or 'malscan --help' command."
}

welcome
identify_os
configure_for_os
install_malscan
configure_malscan
outtro
